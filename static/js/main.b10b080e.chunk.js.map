{"version":3,"sources":["components/task/views/table-toolbar.js","components/task/actions/edit-task.js","components/task/views/selected-editable-or-inactive.js","util/status-enum.js","components/task/views/task-table.js","components/task/actions/create-task.js","components/sync-task.js","util/difficulty-enum.js","util/importance-enum.js","components/navigation/app-drawer.js","components/navigation/navigation-bar.js","service/database-definition.js","components/pwa/add-to-homescreen-prompt.js","components/pwa/install-pwa.js","components/to-do.js","serviceWorker.js","index.js"],"names":["useToolbarStyles","makeStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","type","color","secondary","main","backgroundColor","lighten","light","text","primary","dark","title","flex","titleIcons","display","TableToolbar","selected","setSelected","batchRemoveTasks","batchCompleteTasks","removeTask","completeTask","classes","numSelected","filter","x","id","length","removeItemsWithNullId","elements","item","Toolbar","className","clsx","Typography","variant","Tooltip","IconButton","aria-label","onClick","nonNullSelected","EditTask","editTask","currentTask","toggleSelectedRow","useState","userValue","setUserValue","onSubmit","event","preventDefault","updatedTask","name","noValidate","autoComplete","TextField","label","defaultValue","placeholder","onChange","target","value","SelectedEditableOrInactive","task","isSelected","isEditable","isInactive","TableCell","component","scope","StatusEnum","TaskTable","tasks","index","editability","editable","setEditable","isRowSelected","rowItem","undefined","isRowEditable","editableItems","toggleEditability","rowTaskItem","nonNullExistingItems","existingEditableItems","splice","indexOf","find","push","existingSelectedItems","Table","TableHead","TableRow","TableBody","map","isItemSelected","isItemEditable","isItemInactive","status","INACTIVE","isItemHighlighted","y","z","isRowHighlighted","key","hover","padding","Checkbox","checked","CreateTask","addTask","setValue","SyncTask","allTasks","syncTask","tasksToSync","DifficultyEnum","ImportanceEnumn","AppDrawer","isOpen","toggleDrawer","Drawer","open","onClose","List","ListItem","ListItemIcon","Divider","NavigationBar","isDrawerOpen","setIsDrawerOpen","isSearchIconClicked","setIsSearchIconClicked","console","log","currentTarget","searchIconClick","AppBar","style","position","noWrap","ClickAwayListener","onClickAway","InputBase","autoFocus","inputProps","db","Dexie","version","stores","preferences","AddToHomescreenPrompt","prompt","setPrompt","initializePreferencesIfNecessary","count","put","username","promptUserForInstallation","useEffect","then","ready","JSON","stringify","window","addEventListener","removeEventListener","Promise","reject","Error","InstallPwa","promptToInstall","isAddToHomescreenVisible","setIsAddToHomescreenVisible","setPromptUserForInstallation","hideAddToHomescreen","doNotPromptAgain","toArray","results","update","promptEventIsReady","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","message","alignItems","marginRight","action","Todo","hasError","setError","isLoading","setIsLoading","setTasks","tasksRemaining","setTasksRemaining","ACTIVE","a","async","error","updateEditedTasks","existingTasks","forEach","toggleTaskStatusIndicator","selectedTasks","Grid","container","justify","xs","Paper","gutterBottom","selectedTask","where","equals","delete","keysToDelete","transaction","bulkDelete","info","catch","err","debug","stack","newUserTask","created","Date","now","deadline","description","diffculty","NORMAL","importance","ImportanceEnum","MEDIUM","lastModified","owner","newTasks","i","axios","post","response","syncData","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","contentType","headers","get","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b10b080e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport clsx from 'clsx';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useToolbarStyles = makeStyles(theme => ({\r\n    root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n    theme.palette.type === 'light'\r\n        ? {\r\n            color: theme.palette.secondary.main,\r\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n        : {\r\n            color: theme.palette.text.primary,\r\n            backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n    title: {\r\n    flex: '1 1 100%',\r\n    },\r\n    titleIcons: {\r\n        display: 'flex'\r\n    }\r\n}));\r\n\r\nconst TableToolbar = ({selected, setSelected, batchRemoveTasks, batchCompleteTasks, removeTask, completeTask}) => {\r\n    const classes = useToolbarStyles();\r\n    const numSelected = selected.filter(x => x.id !== null).length;\r\n\r\n    /**\r\n     * Filters out Objects in an array that have and id of null.\r\n     * \r\n     * @param {any Object with an index of `id`} elements \r\n     */\r\n    const removeItemsWithNullId = elements => elements.filter(item => item.id !== null);\r\n\r\n    /**\r\n     * Logic to determine if a single or batch update is appropriate.\r\n     * \r\n     * @param {Integer} numSelected \r\n     */\r\n    const completeTasksAndClearSelected = () => {\r\n        const nonNullSelected = removeItemsWithNullId(selected);\r\n        if (numSelected === 1) {\r\n            completeTask(nonNullSelected[0]);\r\n        } else {\r\n            batchCompleteTasks(selected);\r\n        }\r\n        \r\n        setSelected([]);\r\n    };\r\n\r\n    const removeTasksAndClearSelected = () => {\r\n        const nonNullSelected = removeItemsWithNullId(selected);\r\n        if (numSelected === 1) {\r\n            removeTask(nonNullSelected[0]);\r\n        } else {\r\n            batchRemoveTasks(nonNullSelected);\r\n        }\r\n        \r\n        setSelected([]);\r\n    };\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n            >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\r\n                {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\r\n                Name Of Goal \r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <div className={classes.titleIcons}>\r\n                    <Tooltip title=\"Done\">\r\n                        <IconButton aria-label=\"done\" onClick={completeTasksAndClearSelected}>\r\n                            <DoneIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton aria-label=\"delete\" onClick={removeTasksAndClearSelected}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </div>\r\n            ) : (\r\n                <Tooltip title=\"Filter list\">\r\n                <IconButton aria-label=\"filter list\">\r\n                    <FilterListIcon />\r\n                </IconButton>\r\n                </Tooltip>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nexport default TableToolbar;","import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n/**\r\n * React edit task web component.\r\n * \r\n * @param {function} addTask \r\n */\r\nconst EditTask = ({ editTask, currentTask, toggleSelectedRow }) => {\r\n\tconst [userValue, setUserValue] = useState(currentTask);\r\n\r\n\t/**\r\n\t * Edits an existing task based on the user's input.\r\n\t * \r\n\t * Prevent default actions from the event.\r\n\t * If the event value is empty, return immediately.\r\n\t * Create a constant based on the existing task's values then update it to the user's data.\r\n\t * Call the editTask function with the new constant.\r\n\t * Reset the user's input value to an emtpy string.\r\n\t * Toggle the selected row to unselect and make it uneditable.\r\n\t * \r\n\t * @param {Object} event - Standard Web Event \r\n\t */\r\n\tconst handleSubmit = event => {\r\n\t\tevent.preventDefault();\r\n\t\tif (!userValue) {\r\n\t\t\treturn;\r\n        }\r\n        const updatedTask = {\r\n\t\t\t...currentTask, \r\n\t\t\tname: userValue\r\n\t\t};\r\n\t\teditTask(updatedTask);\r\n\t\tsetUserValue(\"\");\r\n\t\ttoggleSelectedRow();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}\r\n\t\t\tnoValidate\r\n\t\t\tautoComplete=\"off\">\r\n\t\t\t<TextField\r\n\t\t\t\tlabel=\"Edit Task\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tdefaultValue={userValue.name}\r\n\t\t\t\tplaceholder=\"Add a new task\"\r\n\t\t\t\tonChange={event => setUserValue(event.target.value)} />\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default EditTask;","import React from 'react';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport EditTask from '../actions/edit-task';\r\n\r\n/**\r\n * React web component that decides if the name of the task should be normal, has a strikethrough, or be editable.\r\n * \r\n * @param { {\r\n *          id: Integer\r\n *          name: String,\r\n *          status: StatusEnum,\r\n *          created: Date,\r\n *          deadline: Date,\r\n *          description: null,\r\n *          diffculty: DifficultyEnum,\r\n *          importance: ImportanceEnum,\r\n *          lastModified :Date,\r\n *          owner: String\r\n *      } } task\r\n * @param { { id: task.id, index: index } } rowTaskItem\r\n * @param {Boolean} isSelected\r\n * @param {Boolean} isEditable\r\n * @param {Boolean} isInactive\r\n * @param {Function} toggleSelectedRow\r\n * @retuns React Component\r\n */\r\nconst SelectedEditableOrInactive = ({task, editTask, isSelected, isEditable, isInactive, toggleSelectedRow}) => {\r\n    return(\r\n        isSelected && isEditable ? (\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                <EditTask editTask={editTask}\r\n                    currentTask={task}\r\n                    toggleSelectedRow={toggleSelectedRow} />\r\n            </TableCell>\r\n        ) : (\r\n            <TableCell component=\"th\" scope=\"row\" >\r\n                { isInactive ? (\r\n                    <strike>{task.name}</strike>\r\n                ) : (\r\n                    task.name\r\n                )}\r\n            </TableCell>\r\n        )\r\n    );\r\n};\r\n\r\nexport default SelectedEditableOrInactive;","const StatusEnum = {\r\n    \"ACTIVE\": \"ACTIVE\",\r\n    \"INACTIVE\": \"INACTIVE\"\r\n};\r\n\r\nexport default StatusEnum;","import React, {useState} from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TableToolbar from './table-toolbar';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SelectedEditableOrInactive from './selected-editable-or-inactive';\r\nimport StatusEnum from '../../../util/status-enum';\r\nimport '../../../styles/create-task.css';\r\n\r\n/**\r\n * React task web component.\r\n *  \r\n * @param { [ {\r\n *          id: Integer\r\n *          name: String,\r\n *          status: StatusEnum,\r\n *          created: Date,\r\n *          deadline: Date,\r\n *          description: null,\r\n *          diffculty: DifficultyEnum,\r\n *          importance: ImportanceEnum,\r\n *          lastModified :Date,\r\n *          owner: String\r\n *      } ]        } tasks\r\n * @param {Function} completeTask\r\n * @param {Function} removeTask\r\n * @param {Function} batchRemoveTasks\r\n * @param {Function} batchCompleteTasks\r\n */\r\nconst TaskTable = ({tasks, completeTask, removeTask, editTask, batchRemoveTasks, batchCompleteTasks}) => {\r\n    const [selected, setSelected] = useState([{\r\n        id: null, \r\n        index: null \r\n    }]);\r\n    const [editable, setEditable] = useState([{\r\n        id: null,\r\n        index: null,\r\n        editability: null\r\n    }]);\r\n\r\n    /**\r\n     * Identifies if the passed in row item was the item the user selected.\r\n     * \r\n     * Create a variable without null elements / initialized elements.\r\n     * Create a variable of elements that have matching ids.\r\n     * Return boolean value if isSelected is not null, undefined, or an empty array.\r\n     * \r\n     * @param { { id: task.id, index: index } } rowItem \r\n     * @returns Boolean\r\n     */\r\n    const isRowSelected = rowItem => {\r\n        const nonNullSelectedItems = removeItemsWithNullId(selected);\r\n        const isSelected = nonNullSelectedItems.filter(x => x.id === rowItem.id);\r\n        return isSelected !== null && typeof isSelected !== undefined && isSelected.length !== 0 ? true : false;\r\n    };\r\n\r\n    /**\r\n     * Identifies if the passed in row item has been marked as editable by the user.\r\n     * \r\n     * Create a variable without null elements / initialized elements.\r\n     * Create a variable of elements that have matching ids and has a true value for the editability property.\r\n     * Return boolean value if editableItems is not null, undefined, or an empty array.\r\n     * \r\n     * @param { { id: task.id, index: index } } rowItem \r\n     * @returns Boolean\r\n     */\r\n    const isRowEditable = rowItem => { \r\n        const nonNullEditableItems = removeItemsWithNullId(editable);\r\n        const editableItems = nonNullEditableItems.filter(x => x.id === rowItem.id && x.editability)\r\n        return editableItems !== null && typeof editableItems !== undefined && editableItems.length !== 0 ? true : false;\r\n    };\r\n\r\n    /**\r\n     * If the passed in task's status is set to Inactive, return true;\r\n     * \r\n     * @param { {\r\n     *          id: Integer\r\n     *          name: String,\r\n     *          status: StatusEnum,\r\n     *          created: Date,\r\n     *          deadline: Date,\r\n     *          description: null,\r\n     *          diffculty: DifficultyEnum,\r\n     *          importance: ImportanceEnum,\r\n     *          lastModified :Date,\r\n     *          owner: String\r\n     *      } } x \r\n     * @returns Boolean\r\n     */\r\n    const isRowInactive = x => x.status === StatusEnum.INACTIVE;\r\n\r\n    /**\r\n     * If any passed Functions return true the row is identified as highlighted.\r\n     * \r\n     * All passed Functions return a Boolean value;\r\n     * \r\n     * @param {Function} x \r\n     * @param {Function} y \r\n     * @param {Function} z \r\n     * @returns Boolean\r\n     */\r\n    const isRowHighlighted = (x, y, z) => x || y || z;\r\n\r\n    /**\r\n     * Filters out Objects in an array that have and id of null.\r\n     * \r\n     * @param {any Object with an index of `id`} elements \r\n     * @returns Array\r\n     */\r\n    const removeItemsWithNullId = elements => elements.filter(item => item.id !== null);\r\n\r\n    /**\r\n     * Toggles the editability value of the React Hook.\r\n     * \r\n     * Strips the initial null values and sets the values using spread operator.\r\n     * If the row is currently editable - make it uneditable by removing it from the array.\r\n     * If the row is currently uneditable - make it editable by adding it to the array.\r\n     * Reset the React Hook.\r\n     * \r\n     * @param @param { { id: task.id, index: index } } rowTaskItem\r\n     * @returns void\r\n     */\r\n    const toggleEditability = rowTaskItem => {\r\n        const nonNullExistingItems = removeItemsWithNullId(editable);\r\n        let existingEditableItems = [...nonNullExistingItems];\r\n        if (isRowEditable(rowTaskItem)) {\r\n            existingEditableItems.splice(\r\n                existingEditableItems.indexOf(editable.find( x => x.id === rowTaskItem.id)),\r\n                1\r\n            );\r\n        } else {\r\n            existingEditableItems.push({\r\n                id: rowTaskItem.id,\r\n                index: rowTaskItem.index,\r\n                editability: true\r\n            });\r\n        }\r\n        setEditable(existingEditableItems);\r\n    };\r\n\r\n    /**\r\n     * Toggles the selected value of the React Hook.\r\n     * \r\n     * Strips the initial null values and sets the values using spread operator.\r\n     * If the row is currently selected - make it unselected by removing it from the array.\r\n     * If the row is currently selected - check if the row is editable - if it is make it uneditable.\r\n     * If the row is currently unselected - make it selected by adding it to the array.\r\n     * Reset the React Hook.\r\n     * \r\n     * @param { { id: task.id, index: index } } rowTaskItem\r\n     * @returns void\r\n     */\r\n    const toggleSelectedRow = rowTaskItem => {\r\n        const nonNullExistingItems = removeItemsWithNullId(selected);\r\n        let existingSelectedItems = [...nonNullExistingItems];\r\n        if (isRowSelected(rowTaskItem)) {\r\n            existingSelectedItems.splice(\r\n                existingSelectedItems.indexOf(selected.find( x => x.id === rowTaskItem.id)),\r\n                1\r\n            );\r\n            if (isRowEditable(rowTaskItem)) {\r\n                toggleEditability(rowTaskItem);\r\n            }\r\n        } else {\r\n            existingSelectedItems.push(rowTaskItem);\r\n        }\r\n        setSelected(existingSelectedItems);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TableToolbar selected={selected}\r\n                setSelected={setSelected}\r\n                removeTask={removeTask}\r\n                completeTask={completeTask}\r\n                batchRemoveTasks={batchRemoveTasks}\r\n                batchCompleteTasks={batchCompleteTasks} />\r\n            \r\n            <Table aria-label=\"task table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Task Name</TableCell>\r\n                        <TableCell></TableCell>\r\n                        <TableCell></TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        tasks.map((task, index) => {\r\n\r\n                            const rowTaskItem = { \r\n                                id: task.id,\r\n                                index: index \r\n                            };\r\n                            const isItemSelected = isRowSelected(rowTaskItem);\r\n                            const isItemEditable = isRowEditable(rowTaskItem);\r\n                            const isItemInactive = isRowInactive(task);\r\n                            const isItemHighlighted = isRowHighlighted(isItemSelected, isItemEditable, isItemInactive);\r\n\r\n                            return (\r\n                                <TableRow key={index} \r\n                                    hover\r\n                                    selected={isItemHighlighted} \r\n                                    className=\"table-row\">\r\n                                    <SelectedEditableOrInactive\r\n                                        task={task}\r\n                                        editTask={editTask}\r\n                                        isSelected={isItemSelected}\r\n                                        isEditable={isItemEditable}\r\n                                        isInactive={isItemInactive}\r\n                                        toggleSelectedRow={() => toggleSelectedRow(rowTaskItem)} />\r\n                                    \r\n                                    {isItemSelected ? (\r\n                                        <TableCell padding=\"checkbox\" \r\n                                            scope=\"row\" \r\n                                            onClick={() => toggleEditability(rowTaskItem)} >\r\n                                            <Tooltip title=\"Edit\" >\r\n                                                <IconButton aria-label=\"edit\">\r\n                                                    <EditIcon  />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell padding=\"checkbox\" scope=\"row\"></TableCell>\r\n                                    )}\r\n                                    <TableCell padding=\"checkbox\" \r\n                                        scope=\"row\" \r\n                                        onClick={() => toggleSelectedRow(rowTaskItem)} >\r\n                                        <Checkbox checked={isItemSelected} />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskTable;","import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n/**\r\n * React create task web component.\r\n * \r\n * @param {function} addTask \r\n */\r\nconst CreateTask = ({ addTask }) => {\r\n\tconst [value, setValue] = useState(\"\");\r\n\r\n\t/**\r\n\t * Creates a task based on the user's input.\r\n\t * \r\n\t * Prevent default actions from the event.\r\n\t * If the event value is empty, return immediately.\r\n\t * Add the task to the React State.\r\n\t * Reset the user's input value to an emtpy string.\r\n\t * \r\n\t * @param {Object} event - Standard Web Event \r\n\t */\r\n\tconst handleSubmitToCreateTask = event => {\r\n\t\tevent.preventDefault();\r\n\t\tif (!value) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\taddTask(value);\r\n\t\tsetValue(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<create-task-form-styling>\r\n\t\t\t<form onSubmit={handleSubmitToCreateTask}\r\n\t\t\t\tnoValidate\r\n\t\t\t\tautoComplete=\"off\">\r\n\t\t\t\t<create-task-container-left>\r\n\t\t\t\t\t<TextField label=\"Task\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\tplaceholder=\"Add a new task\"\r\n\t\t\t\t\t\tonChange={event => setValue(event.target.value)} />\r\n\t\t\t\t</create-task-container-left>\r\n\t\t\t\t<create-task-container-right>\r\n\t\t\t\t\t<Tooltip title=\"save\" >\r\n\t\t\t\t\t\t\t<IconButton aria-label=\"save\" \r\n\t\t\t\t\t\t\t\ttype=\"submit\">\r\n\t\t\t\t\t\t\t\t<SendIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</create-task-container-right>\r\n\t\t\t</form>\r\n\t\t</create-task-form-styling>\r\n\t);\r\n};\r\n\r\nexport default CreateTask;","import React from 'react';\r\n\r\n/**\r\n * React sync task web component.\r\n * \r\n * @param {function} addTask \r\n */\r\nconst SyncTask = ({allTasks, syncTask}) => {\r\n    const doesIdExist = (task) => (!('id' in task)) ? task : null;\r\n    const tasksToSync = allTasks.filter(doesIdExist);\r\n\r\n    return(\r\n        <button onClick = {() => syncTask(tasksToSync)}>\r\n            Sync To Database\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default SyncTask;","const DifficultyEnum = {\r\n    \"VERY_EASY\": \"VERY_EASY\",\r\n    \"EASY\": \"EASY\",\r\n    \"NORMAL\": \"NORMAL\",\r\n    \"HARD\": \"HARD\",\r\n    \"VERY_HARD\": \"VERY_HARD\"\r\n};\r\n\r\nexport default DifficultyEnum;","const ImportanceEnumn = {\r\n    \"LOW\": \"LOW\",\r\n    \"MEDIUM\": \"MEDIUM\",\r\n    \"HIGH\": \"HIGH\"\r\n};\r\n\r\nexport default ImportanceEnumn;","import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport List from '@material-ui/core/List';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\n\r\nconst AppDrawer = ({isOpen, toggleDrawer}) => {\r\n\treturn(\r\n\t\t<Drawer open={isOpen}\r\n\t\t\tonClose={toggleDrawer} >\r\n\t\t\t<div>\r\n\t\t\t\t<List>\r\n\t\t\t\t\t<ListItem>\r\n\t\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t\t<FaceIcon />\r\n\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t</List>\r\n\t\t\t\t<Divider />\r\n\t\t\t\t<List>\r\n\t\t\t\t\t<ListItem>\r\n\t\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t\t<GetAppIcon />\r\n\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t</ListItem>\r\n\t\t\t\t</List>\r\n\t\t\t</div>\t\r\n\t\t</Drawer>\r\n\t);\r\n};\r\nexport default AppDrawer;","import React, {useState} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport AppDrawer from './app-drawer';\r\nimport '../../styles/navigation-bar.css';\r\n\r\nconst NavigationBar = () => {\r\n\tconst [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n\tconst [isSearchIconClicked, setIsSearchIconClicked] = useState(false);\r\n\r\n\tconst toggleDrawer = event => {\r\n\t\tconsole.log(`${event.currentTarget}`)\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n        setIsDrawerOpen(!isDrawerOpen);\r\n    };\r\n\r\n\tconst searchIconClick = () => {\r\n\t\tsetIsSearchIconClicked(!isSearchIconClicked);\r\n\t};\r\n\r\n\treturn (\r\n\t\t\t<AppBar style={{position: 'sticky'}}>\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<container-left>\r\n\t\t\t\t\t\t<hamburger-styling>\r\n\t\t\t\t\t\t\t<IconButton color=\"inherit\"\r\n\t\t\t\t\t\t\t\taria-label=\"open drawer\"\r\n\t\t\t\t\t\t\t\tonClick={toggleDrawer} >\r\n\t\t\t\t\t\t\t\t<MenuIcon />\r\n\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t<AppDrawer isOpen={isDrawerOpen}\r\n\t\t\t\t\t\t\t\t\ttoggleDrawer={toggleDrawer} />\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</hamburger-styling>\r\n\t\t\t\t\t\t<title-styling>\r\n\t\t\t\t\t\t\t<Typography variant=\"h6\" noWrap>\r\n\t\t\t\t\t\t\t\tPWA To Do App\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</title-styling>\r\n\t\t\t\t\t</container-left>\r\n\t\t\t\t\t<container-right>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisSearchIconClicked === false ? (\r\n\t\t\t\t\t\t\t\t<search-icon-styling>\r\n\t\t\t\t\t\t\t\t\t{/* below classes taken from raw, inspecting html - could not get icons to match*/}\r\n\t\t\t\t\t\t\t\t\t<div className=\"MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit\">\r\n\t\t\t\t\t\t\t\t\t\t<SearchIcon onClick={searchIconClick} />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</search-icon-styling>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<ClickAwayListener onClickAway={searchIconClick} >\r\n\t\t\t\t\t\t\t\t\t\t<search-input-styling>\r\n\t\t\t\t\t\t\t\t\t\t\t<InputBase\r\n\t\t\t\t\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Search…\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-label': 'search' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"rootInput\" />\r\n\t\t\t\t\t\t\t\t\t\t</search-input-styling>\r\n\t\t\t\t\t\t\t\t\t</ClickAwayListener>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</container-right>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t);\r\n}\r\n\r\nexport default NavigationBar;","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie(\"ToDoDb\");\r\ndb.version(1).stores({\r\n    tasks: `++id`,\r\n    preferences: `++id`\r\n});\r\n\r\nexport default db;","import { useState, useEffect } from 'react';\r\nimport db from '../../service/database-definition';\r\n\r\n/**\r\n * Prompts the user to install the application.\r\n */\r\nconst AddToHomescreenPrompt = () => {\r\n    const [prompt, setPrompt] = useState(false);\r\n\r\n    const promptToInstall = () => {\r\n        if (prompt) {\r\n            return prompt.prompt();\r\n        }\r\n        return Promise.reject(new Error('Tried installing before browser sent \"beforeinstallprompt\" event'));\r\n    };\r\n\r\n    const initializePreferencesIfNecessary = count => {\r\n        if (count === 0) {\r\n            const initialize = {\r\n                username: 'loganconnor44',\r\n                promptUserForInstallation: true\r\n            };\r\n            db.preferences.put(initialize);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(`inside use effect for add to homescreen prompt`)\r\n        db.preferences.count().then(initializePreferencesIfNecessary);\r\n        \r\n        const ready = event => {\r\n            console.log(`above prevent default`)\r\n            event.preventDefault();\r\n            setPrompt(event);\r\n            console.log(JSON.stringify(event))\r\n        };\r\n        window.addEventListener(\"beforeinstallprompt\", ready);\r\n        return () => {\r\n            window.removeEventListener(\"beforeinstallprompt\", ready);\r\n        };\r\n    }, []);\r\n\r\n    return [prompt, promptToInstall];\r\n};\r\n\r\nexport default AddToHomescreenPrompt;","import React, { useState, useEffect } from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport AddToHomescreenPrompt from './add-to-homescreen-prompt';\r\nimport db from '../../service/database-definition';\r\n\r\n/**\r\n * React web component to install the WebApk or a web shortcut to the user's homescreen.\r\n */\r\nconst InstallPwa = () => {\r\n    const [prompt, promptToInstall] = AddToHomescreenPrompt();\r\n    const [isAddToHomescreenVisible, setIsAddToHomescreenVisible] = useState(false);\r\n    const [promptUserForInstallation, setPromptUserForInstallation] = useState(false);\r\n\r\n    const promptEventIsReady = prompt => prompt !== false ? prompt : false;\r\n\r\n    const dismissAndStorePreference = event => {\r\n        hideAddToHomescreen();\r\n        doNotPromptAgain(event);\r\n    };\r\n\r\n    const hideAddToHomescreen = () => setIsAddToHomescreenVisible(false);\r\n\r\n    const installAndHideMessage = () => {\r\n        hideAddToHomescreen();\r\n        promptToInstall();\r\n    };\r\n\r\n    const doNotPromptAgain = event => {\r\n        event.preventDefault();\r\n        db.preferences.toArray().then(results => {\r\n            db.preferences.update(results[0].id, {promptUserForInstallation: false});\r\n        });\r\n    };\r\n    \r\n    db.preferences.toArray().then(results => {\r\n        if (results.length !== 0) {\r\n            setPromptUserForInstallation(results[0].promptUserForInstallation);\r\n        }\r\n    });\r\n    \r\n    useEffect(() => {\r\n        if (promptEventIsReady() && promptUserForInstallation) {\r\n            setIsAddToHomescreenVisible(true);\r\n        }\r\n    }, [prompt, promptUserForInstallation]);\r\n\r\n    const message = \"Click here to download this app.\";\r\n\r\n    return ( \r\n        isAddToHomescreenVisible &&\r\n            <Snackbar anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                    \r\n                }}\r\n                open={isAddToHomescreenVisible}\r\n                autoHideDuration={3000} >\r\n                <SnackbarContent message={\r\n                    <div style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center'\r\n                        }} >\r\n                        <InfoIcon style={{marginRight: 4}} />\r\n                    {message}\r\n                    </div>\r\n                    }\r\n                    style={{backgroundColor: '#43a047'}}\r\n                    action={\r\n                        <div>\r\n                            <IconButton key=\"download-and-dismiss\" aria-label=\"download-and-dismiss\" onClick={installAndHideMessage} >\r\n                                <GetAppIcon />\r\n                            </IconButton>\r\n                            <IconButton key=\"close\" aria-label=\"close\" onClick={dismissAndStorePreference} >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    } />\r\n            </Snackbar>\r\n    );\r\n};\r\n\r\nexport default InstallPwa;","import React, { useState, useEffect } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport axios from 'axios';\r\nimport TaskTable from './task/views/task-table';\r\nimport CreateTask from './task/actions/create-task';\r\nimport SyncTask from './sync-task';\r\nimport StatusEnum from '../util/status-enum';\r\nimport DifficultyEnum from '../util/difficulty-enum';\r\nimport ImportanceEnum from '../util/importance-enum';\r\nimport NavigationBar from './navigation/navigation-bar';\r\nimport InstallPwa from './pwa/install-pwa';\r\nimport db from '../service/database-definition';\r\nimport '../styles/to-do.css';\r\n\r\n/**\r\n * Main To Do application component.\r\n */\r\nconst Todo = () => {\r\n    const [hasError, setError] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [tasksRemaining, setTasksRemaining] = useState(0);\r\n\r\n    /**\r\n     * Retrieves data from mock api.\r\n     */\r\n    // useEffect(() => {\r\n    //     const fetchData = async () => {\r\n    //         setIsLoading(true);\r\n    //         try {\r\n    //             const response = await axios.get(\"http://localhost:8080/to-do/goal/1\");\r\n    //             console.log(response.data);\r\n    //             setTasks([response.data]);\r\n    //         } catch(error) {\r\n    //             setError(true);\r\n    //         }\r\n    //         setIsLoading(false);\r\n    //     };\r\n    //     fetchData();\r\n    // }, []);\r\n\r\n    /**\r\n     * Updates setTasksRemaining anytime there is a change to `tasks`\r\n     */\r\n    useEffect(() => {\r\n        setTasksRemaining(tasks.filter(task => task.status === StatusEnum.ACTIVE).length);\r\n    }, [tasks]);\r\n\r\n    useEffect(() => {\r\n        const fetchBrowserData = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                db.tasks.toArray().then(x => setTasks(x));\r\n            } catch(error) {\r\n                setError(true);\r\n            }\r\n            setIsLoading(false);\r\n        };\r\n        fetchBrowserData();\r\n    // eslint-disable-next-line\r\n    }, []);\r\n\r\n    /**\r\n     * Adds a new task and defaults it to not complete.\r\n     * \r\n     * @param {String} title \r\n     */\r\n    const addTask = name => {\r\n        const newUserTask = { \r\n            name: name,\r\n            status: StatusEnum.ACTIVE,\r\n            created: Date.now(),\r\n            deadline: null,\r\n            description: null,\r\n            diffculty: DifficultyEnum.NORMAL,\r\n            importance: ImportanceEnum.MEDIUM,\r\n            lastModified: null,\r\n            owner: \"Logan Connor\"\r\n        };\r\n        const newTasks = [\r\n            ...tasks,\r\n            newUserTask\r\n        ];\r\n        setTasks(newTasks);\r\n        db.tasks.put(newUserTask)\r\n    };\r\n\r\n    /**\r\n     * Sets an existing task to completed.\r\n     * \r\n     * @param { {id: integer, index: integer} } selectedTask\r\n     */\r\n    const completeTask = selectedTask => {\r\n        const existingTasks = toggleTaskStatusIndicator([selectedTask]);\r\n        db.tasks.update(selectedTask.id, {status: existingTasks[selectedTask.index].status});\r\n    };\r\n\r\n    /**\r\n     * Edits an existing task's name.\r\n     * \r\n     * @todo this param is not correct\r\n     * @param { {id: integer, index: integer} } selectedTask\r\n     */\r\n    const editTask = updatedTask => {\r\n        updateEditedTasks(updatedTask);\r\n        db.tasks.update(updatedTask.id, {name: updatedTask.name});\r\n    };\r\n\r\n    const updateEditedTasks = updatedTask => {\r\n        const existingTasks = [...tasks];\r\n        existingTasks.forEach(task => {\r\n            if (updatedTask.id === task.id) {\r\n                task.name = updatedTask.name;\r\n            }\r\n        });\r\n        setTasks(existingTasks);\r\n    };\r\n\r\n    /**\r\n     * Toggles a task's status enum.\r\n     * \r\n     * Retrieves the existing tasks.\r\n     * Iterates through the passed in selected tasks and sets the appropriate status.\r\n     * Sets the tasks to the updated ones.\r\n     * Returns the updated tasks.\r\n     * @param { [ {id: integer, index: integer} ] } selectedTasks \r\n     * @returns { [ {id: integer, index: integer} ] }\r\n     */\r\n    const toggleTaskStatusIndicator = selectedTasks => {\r\n        const existingTasks = [...tasks];\r\n        selectedTasks.forEach(task => {\r\n            if (existingTasks[task.index].status === StatusEnum.INACTIVE) {\r\n                existingTasks[task.index].status = StatusEnum.ACTIVE;\r\n            } else if (existingTasks[task.index].status === StatusEnum.ACTIVE) {\r\n                existingTasks[task.index].status = StatusEnum.INACTIVE;\r\n            }\r\n        });\r\n        setTasks(existingTasks);\r\n        return existingTasks;\r\n    };\r\n\r\n    /**\r\n     * Removes an existing task from the application state.\r\n     * \r\n     * @param { {id: integer, index: integer} } selectedTask \r\n     */\r\n    const removeTask = selectedTask => {\r\n        const existingTasks = [...tasks];\r\n        existingTasks.splice(selectedTask.index, 1);\r\n        setTasks(existingTasks);\r\n        console.log(`the selected task id is: ${selectedTask.id}`)\r\n        db.tasks.where(\"id\").equals(selectedTask.id).delete()\r\n    };\r\n\r\n    const batchRemoveTasks = selectedTasks => {\r\n        const keysToDelete = selectedTasks.map(x => x.id);\r\n        db.transaction('rw', db.tasks, async () => {\r\n            db.tasks.bulkDelete(keysToDelete);\r\n            db.tasks.toArray().then(x => setTasks(x));\r\n        }).then(() => {\r\n            console.info(`The selected tasks, ${JSON.stringify(selectedTasks)}, were saved to the browser db.`);\r\n        }).catch(err => {\r\n            console.debug(`There was an error when removing the selected tasks, ${JSON.stringify(selectedTasks)}, from the browser db.`);\r\n            console.error(err.stack);\r\n        });\r\n    };\r\n\r\n    const batchCompleteTasks = selectedTasks => {\r\n        const existingTasks = toggleTaskStatusIndicator(selectedTasks);        \r\n        \r\n        db.transaction('rw', db.tasks, async () => {\r\n            selectedTasks.forEach(task => {\r\n                db.tasks.update(task.id, {status: existingTasks[task.index].status});\r\n            });\r\n            db.tasks.toArray().then(x => setTasks(x));\r\n        }).then(() => {\r\n            console.info(`The selected tasks, ${JSON.stringify(selectedTasks)}, were set as complete in the browser db.`);\r\n        }).catch(err => {\r\n            console.debug(`There was an error when updating the selected tasks, ${JSON.stringify(selectedTasks)}, to the browser db.`)\r\n            console.error(err.stack);\r\n        });\r\n    };\r\n\r\n    const syncTask = tasksToSync => {\r\n        console.log(tasksToSync);\r\n        const syncData = async () => {\r\n            setIsLoading(true);\r\n            for (let i = 0; i < tasksToSync.length; i++) {\r\n                const response = await axios.post(\"http://localhost:8080/to-do/goal\", tasksToSync[i]).then(response => {\r\n                    console.log(response);\r\n                }).catch(function (error) {\r\n                    console.log(error);\r\n                });\r\n                //setTasks([response.data]);\r\n            }\r\n            setIsLoading(false);\r\n        };\r\n        syncData();\r\n        return;\r\n    };\r\n\r\n    return(\r\n        <app-root-styling>\r\n\r\n            <div>\r\n                <NavigationBar />\r\n            </div>\r\n\r\n            \r\n\r\n            <InstallPwa />\r\n\r\n            <app-content-styling>\r\n                <Grid container \r\n                    spacing={3} \r\n                    alignItems=\"center\"\r\n                    justify=\"center\">\r\n                    <Grid item xs={10}>\r\n                        <grid-content-styling>\r\n                            <Paper style={{padding: '16px'}}>\r\n                                <Typography variant=\"h6\" gutterBottom>\r\n                                        {tasksRemaining} Active Tasks\r\n                                    </Typography>\r\n\r\n                                    {hasError && <div>Something went wrong ...</div>}\r\n\r\n                                    {!isLoading && tasks ?\r\n                                        <TaskTable tasks={tasks}\r\n                                            completeTask = {completeTask}\r\n                                            removeTask = {removeTask} \r\n                                            editTask = {editTask}\r\n                                            batchRemoveTasks = {batchRemoveTasks} \r\n                                            batchCompleteTasks = {batchCompleteTasks} /> :\r\n                                        <div>Loading ...</div>\r\n                                    }\r\n\r\n                                <div className = \"create-task\">\r\n                                    <CreateTask addTask = {addTask} />\r\n                                </div>\r\n                            </Paper>\r\n                        </grid-content-styling>\r\n                        \r\n                        <div>\r\n                            <SyncTask allTasks = {tasks} \r\n                                syncTask = {syncTask} />\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </app-content-styling>\r\n\r\n        </app-root-styling>\r\n    );\r\n};\r\n\r\nexport default Todo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './components/to-do';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}