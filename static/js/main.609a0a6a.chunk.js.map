{"version":3,"sources":["components/task/views/table-toolbar.js","components/task/actions/edit-task.js","components/task/views/selected-editable-or-inactive.js","util/status-enum.js","components/task/views/task-table.js","components/task/actions/create-task.js","components/sync-task.js","util/difficulty-enum.js","util/importance-enum.js","service/database-definition.js","components/pwa/add-to-homescreen-prompt.js","components/navigation/app-drawer.js","components/navigation/navigation-bar.js","components/pwa/install-pwa.js","components/to-do.js","serviceWorker.js","index.js"],"names":["useToolbarStyles","makeStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","type","color","secondary","main","backgroundColor","lighten","light","text","primary","dark","title","flex","titleIcons","display","TableToolbar","selected","setSelected","batchRemoveTasks","batchCompleteTasks","removeTask","completeTask","classes","numSelected","filter","x","id","length","removeItemsWithNullId","elements","item","Toolbar","className","clsx","Typography","variant","Tooltip","IconButton","aria-label","onClick","nonNullSelected","EditTask","editTask","currentTask","toggleSelectedRow","useState","userValue","setUserValue","onSubmit","event","preventDefault","updatedTask","name","noValidate","autoComplete","TextField","label","defaultValue","placeholder","onChange","target","value","SelectedEditableOrInactive","task","isSelected","isEditable","isInactive","TableCell","component","scope","StatusEnum","TaskTable","tasks","index","editability","editable","setEditable","isRowSelected","rowItem","undefined","isRowEditable","editableItems","toggleEditability","rowTaskItem","nonNullExistingItems","existingEditableItems","splice","indexOf","find","push","existingSelectedItems","Table","TableHead","TableRow","TableBody","map","isItemSelected","isItemEditable","isItemInactive","status","INACTIVE","isItemHighlighted","y","z","isRowHighlighted","key","hover","padding","Checkbox","checked","CreateTask","addTask","setValue","SyncTask","allTasks","syncTask","tasksToSync","DifficultyEnum","ImportanceEnumn","db","Dexie","version","stores","preferences","AddToHomescreenPrompt","prompt","setPrompt","initializePreferencesIfNecessary","count","put","username","promptUserForInstallation","useEffect","then","ready","window","addEventListener","removeEventListener","Promise","reject","Error","AppDrawer","isOpen","toggleDrawer","promptToInstall","Drawer","open","onClose","List","ListItem","ListItemIcon","Divider","NavigationBar","isDrawerOpen","setIsDrawerOpen","isSearchIconClicked","setIsSearchIconClicked","searchIconClick","AppBar","style","position","noWrap","ClickAwayListener","onClickAway","InputBase","autoFocus","inputProps","InstallPwa","isAddToHomescreenVisible","setIsAddToHomescreenVisible","setPromptUserForInstallation","hideAddToHomescreen","doNotPromptAgain","toArray","results","update","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","message","alignItems","marginRight","action","Todo","hasError","setError","isLoading","setIsLoading","setTasks","tasksRemaining","setTasksRemaining","ACTIVE","a","async","error","updateEditedTasks","existingTasks","forEach","toggleTaskStatusIndicator","selectedTasks","Grid","container","justify","xs","Paper","gutterBottom","selectedTask","console","log","where","equals","delete","keysToDelete","transaction","bulkDelete","info","JSON","stringify","catch","err","debug","stack","newUserTask","created","Date","now","deadline","description","diffculty","NORMAL","importance","ImportanceEnum","MEDIUM","lastModified","owner","newTasks","i","axios","post","response","syncData","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","contentType","headers","get","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.609a0a6a.chunk.js","sourcesContent":["import React from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport DoneIcon from '@material-ui/icons/Done';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\n\nconst useToolbarStyles = makeStyles(theme => ({\n    root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    },\n    highlight:\n    theme.palette.type === 'light'\n        ? {\n            color: theme.palette.secondary.main,\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n        : {\n            color: theme.palette.text.primary,\n            backgroundColor: theme.palette.secondary.dark,\n        },\n    title: {\n    flex: '1 1 100%',\n    },\n    titleIcons: {\n        display: 'flex'\n    }\n}));\n\nconst TableToolbar = ({selected, setSelected, batchRemoveTasks, batchCompleteTasks, removeTask, completeTask}) => {\n    const classes = useToolbarStyles();\n    const numSelected = selected.filter(x => x.id !== null).length;\n\n    /**\n     * Filters out Objects in an array that have and id of null.\n     * \n     * @param {any Object with an index of `id`} elements \n     */\n    const removeItemsWithNullId = elements => elements.filter(item => item.id !== null);\n\n    /**\n     * Logic to determine if a single or batch update is appropriate.\n     * \n     * @param {Integer} numSelected \n     */\n    const completeTasksAndClearSelected = () => {\n        const nonNullSelected = removeItemsWithNullId(selected);\n        if (numSelected === 1) {\n            completeTask(nonNullSelected[0]);\n        } else {\n            batchCompleteTasks(selected);\n        }\n        \n        setSelected([]);\n    };\n\n    const removeTasksAndClearSelected = () => {\n        const nonNullSelected = removeItemsWithNullId(selected);\n        if (numSelected === 1) {\n            removeTask(nonNullSelected[0]);\n        } else {\n            batchRemoveTasks(nonNullSelected);\n        }\n        \n        setSelected([]);\n    };\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n            >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n                {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n                Name Of Goal \n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <div className={classes.titleIcons}>\n                    <Tooltip title=\"Done\">\n                        <IconButton aria-label=\"done\" onClick={completeTasksAndClearSelected}>\n                            <DoneIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Delete\">\n                        <IconButton aria-label=\"delete\" onClick={removeTasksAndClearSelected}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </Tooltip>\n                </div>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                <IconButton aria-label=\"filter list\">\n                    <FilterListIcon />\n                </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nexport default TableToolbar;","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\n/**\n * React edit task web component.\n * \n * @param {function} addTask \n */\nconst EditTask = ({ editTask, currentTask, toggleSelectedRow }) => {\n\tconst [userValue, setUserValue] = useState(currentTask);\n\n\t/**\n\t * Edits an existing task based on the user's input.\n\t * \n\t * Prevent default actions from the event.\n\t * If the event value is empty, return immediately.\n\t * Create a constant based on the existing task's values then update it to the user's data.\n\t * Call the editTask function with the new constant.\n\t * Reset the user's input value to an emtpy string.\n\t * Toggle the selected row to unselect and make it uneditable.\n\t * \n\t * @param {Object} event - Standard Web Event \n\t */\n\tconst handleSubmit = event => {\n\t\tevent.preventDefault();\n\t\tif (!userValue) {\n\t\t\treturn;\n        }\n        const updatedTask = {\n\t\t\t...currentTask, \n\t\t\tname: userValue\n\t\t};\n\t\teditTask(updatedTask);\n\t\tsetUserValue(\"\");\n\t\ttoggleSelectedRow();\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}\n\t\t\tnoValidate\n\t\t\tautoComplete=\"off\">\n\t\t\t<TextField\n\t\t\t\tlabel=\"Edit Task\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tdefaultValue={userValue.name}\n\t\t\t\tplaceholder=\"Add a new task\"\n\t\t\t\tonChange={event => setUserValue(event.target.value)} />\n\t\t</form>\n\t);\n};\n\nexport default EditTask;","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport EditTask from '../actions/edit-task';\n\n/**\n * React web component that decides if the name of the task should be normal, has a strikethrough, or be editable.\n * \n * @param { {\n *          id: Integer\n *          name: String,\n *          status: StatusEnum,\n *          created: Date,\n *          deadline: Date,\n *          description: null,\n *          diffculty: DifficultyEnum,\n *          importance: ImportanceEnum,\n *          lastModified :Date,\n *          owner: String\n *      } } task\n * @param { { id: task.id, index: index } } rowTaskItem\n * @param {Boolean} isSelected\n * @param {Boolean} isEditable\n * @param {Boolean} isInactive\n * @param {Function} toggleSelectedRow\n * @retuns React Component\n */\nconst SelectedEditableOrInactive = ({task, editTask, isSelected, isEditable, isInactive, toggleSelectedRow}) => {\n    return(\n        isSelected && isEditable ? (\n            <TableCell component=\"th\" scope=\"row\">\n                <EditTask editTask={editTask}\n                    currentTask={task}\n                    toggleSelectedRow={toggleSelectedRow} />\n            </TableCell>\n        ) : (\n            <TableCell component=\"th\" scope=\"row\" >\n                { isInactive ? (\n                    <strike>{task.name}</strike>\n                ) : (\n                    task.name\n                )}\n            </TableCell>\n        )\n    );\n};\n\nexport default SelectedEditableOrInactive;","const StatusEnum = {\n    \"ACTIVE\": \"ACTIVE\",\n    \"INACTIVE\": \"INACTIVE\"\n};\n\nexport default StatusEnum;","import React, {useState} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Checkbox } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TableToolbar from './table-toolbar';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SelectedEditableOrInactive from './selected-editable-or-inactive';\nimport StatusEnum from '../../../util/status-enum';\nimport '../../../styles/create-task.css';\n\n/**\n * React task web component.\n *  \n * @param { [ {\n *          id: Integer\n *          name: String,\n *          status: StatusEnum,\n *          created: Date,\n *          deadline: Date,\n *          description: null,\n *          diffculty: DifficultyEnum,\n *          importance: ImportanceEnum,\n *          lastModified :Date,\n *          owner: String\n *      } ]        } tasks\n * @param {Function} completeTask\n * @param {Function} removeTask\n * @param {Function} batchRemoveTasks\n * @param {Function} batchCompleteTasks\n */\nconst TaskTable = ({tasks, completeTask, removeTask, editTask, batchRemoveTasks, batchCompleteTasks}) => {\n    const [selected, setSelected] = useState([{\n        id: null, \n        index: null \n    }]);\n    const [editable, setEditable] = useState([{\n        id: null,\n        index: null,\n        editability: null\n    }]);\n\n    /**\n     * Identifies if the passed in row item was the item the user selected.\n     * \n     * Create a variable without null elements / initialized elements.\n     * Create a variable of elements that have matching ids.\n     * Return boolean value if isSelected is not null, undefined, or an empty array.\n     * \n     * @param { { id: task.id, index: index } } rowItem \n     * @returns Boolean\n     */\n    const isRowSelected = rowItem => {\n        const nonNullSelectedItems = removeItemsWithNullId(selected);\n        const isSelected = nonNullSelectedItems.filter(x => x.id === rowItem.id);\n        return isSelected !== null && typeof isSelected !== undefined && isSelected.length !== 0 ? true : false;\n    };\n\n    /**\n     * Identifies if the passed in row item has been marked as editable by the user.\n     * \n     * Create a variable without null elements / initialized elements.\n     * Create a variable of elements that have matching ids and has a true value for the editability property.\n     * Return boolean value if editableItems is not null, undefined, or an empty array.\n     * \n     * @param { { id: task.id, index: index } } rowItem \n     * @returns Boolean\n     */\n    const isRowEditable = rowItem => { \n        const nonNullEditableItems = removeItemsWithNullId(editable);\n        const editableItems = nonNullEditableItems.filter(x => x.id === rowItem.id && x.editability)\n        return editableItems !== null && typeof editableItems !== undefined && editableItems.length !== 0 ? true : false;\n    };\n\n    /**\n     * If the passed in task's status is set to Inactive, return true;\n     * \n     * @param { {\n     *          id: Integer\n     *          name: String,\n     *          status: StatusEnum,\n     *          created: Date,\n     *          deadline: Date,\n     *          description: null,\n     *          diffculty: DifficultyEnum,\n     *          importance: ImportanceEnum,\n     *          lastModified :Date,\n     *          owner: String\n     *      } } x \n     * @returns Boolean\n     */\n    const isRowInactive = x => x.status === StatusEnum.INACTIVE;\n\n    /**\n     * If any passed Functions return true the row is identified as highlighted.\n     * \n     * All passed Functions return a Boolean value;\n     * \n     * @param {Function} x \n     * @param {Function} y \n     * @param {Function} z \n     * @returns Boolean\n     */\n    const isRowHighlighted = (x, y, z) => x || y || z;\n\n    /**\n     * Filters out Objects in an array that have and id of null.\n     * \n     * @param {any Object with an index of `id`} elements \n     * @returns Array\n     */\n    const removeItemsWithNullId = elements => elements.filter(item => item.id !== null);\n\n    /**\n     * Toggles the editability value of the React Hook.\n     * \n     * Strips the initial null values and sets the values using spread operator.\n     * If the row is currently editable - make it uneditable by removing it from the array.\n     * If the row is currently uneditable - make it editable by adding it to the array.\n     * Reset the React Hook.\n     * \n     * @param @param { { id: task.id, index: index } } rowTaskItem\n     * @returns void\n     */\n    const toggleEditability = rowTaskItem => {\n        const nonNullExistingItems = removeItemsWithNullId(editable);\n        let existingEditableItems = [...nonNullExistingItems];\n        if (isRowEditable(rowTaskItem)) {\n            existingEditableItems.splice(\n                existingEditableItems.indexOf(editable.find( x => x.id === rowTaskItem.id)),\n                1\n            );\n        } else {\n            existingEditableItems.push({\n                id: rowTaskItem.id,\n                index: rowTaskItem.index,\n                editability: true\n            });\n        }\n        setEditable(existingEditableItems);\n    };\n\n    /**\n     * Toggles the selected value of the React Hook.\n     * \n     * Strips the initial null values and sets the values using spread operator.\n     * If the row is currently selected - make it unselected by removing it from the array.\n     * If the row is currently selected - check if the row is editable - if it is make it uneditable.\n     * If the row is currently unselected - make it selected by adding it to the array.\n     * Reset the React Hook.\n     * \n     * @param { { id: task.id, index: index } } rowTaskItem\n     * @returns void\n     */\n    const toggleSelectedRow = rowTaskItem => {\n        const nonNullExistingItems = removeItemsWithNullId(selected);\n        let existingSelectedItems = [...nonNullExistingItems];\n        if (isRowSelected(rowTaskItem)) {\n            existingSelectedItems.splice(\n                existingSelectedItems.indexOf(selected.find( x => x.id === rowTaskItem.id)),\n                1\n            );\n            if (isRowEditable(rowTaskItem)) {\n                toggleEditability(rowTaskItem);\n            }\n        } else {\n            existingSelectedItems.push(rowTaskItem);\n        }\n        setSelected(existingSelectedItems);\n    };\n\n    return (\n        <div>\n            <TableToolbar selected={selected}\n                setSelected={setSelected}\n                removeTask={removeTask}\n                completeTask={completeTask}\n                batchRemoveTasks={batchRemoveTasks}\n                batchCompleteTasks={batchCompleteTasks} />\n            \n            <Table aria-label=\"task table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Task Name</TableCell>\n                        <TableCell></TableCell>\n                        <TableCell></TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        tasks.map((task, index) => {\n\n                            const rowTaskItem = { \n                                id: task.id,\n                                index: index \n                            };\n                            const isItemSelected = isRowSelected(rowTaskItem);\n                            const isItemEditable = isRowEditable(rowTaskItem);\n                            const isItemInactive = isRowInactive(task);\n                            const isItemHighlighted = isRowHighlighted(isItemSelected, isItemEditable, isItemInactive);\n\n                            return (\n                                <TableRow key={index} \n                                    hover\n                                    selected={isItemHighlighted} \n                                    className=\"table-row\">\n                                    <SelectedEditableOrInactive\n                                        task={task}\n                                        editTask={editTask}\n                                        isSelected={isItemSelected}\n                                        isEditable={isItemEditable}\n                                        isInactive={isItemInactive}\n                                        toggleSelectedRow={() => toggleSelectedRow(rowTaskItem)} />\n                                    \n                                    {isItemSelected ? (\n                                        <TableCell padding=\"checkbox\" \n                                            scope=\"row\" \n                                            onClick={() => toggleEditability(rowTaskItem)} >\n                                            <Tooltip title=\"Edit\" >\n                                                <IconButton aria-label=\"edit\">\n                                                    <EditIcon  />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </TableCell>\n                                    ) : (\n                                        <TableCell padding=\"checkbox\" scope=\"row\"></TableCell>\n                                    )}\n                                    <TableCell padding=\"checkbox\" \n                                        scope=\"row\" \n                                        onClick={() => toggleSelectedRow(rowTaskItem)} >\n                                        <Checkbox checked={isItemSelected} />\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </div>\n    );\n};\n\nexport default TaskTable;","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport SendIcon from '@material-ui/icons/Send';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n/**\n * React create task web component.\n * \n * @param {function} addTask \n */\nconst CreateTask = ({ addTask }) => {\n\tconst [value, setValue] = useState(\"\");\n\n\t/**\n\t * Creates a task based on the user's input.\n\t * \n\t * Prevent default actions from the event.\n\t * If the event value is empty, return immediately.\n\t * Add the task to the React State.\n\t * Reset the user's input value to an emtpy string.\n\t * \n\t * @param {Object} event - Standard Web Event \n\t */\n\tconst handleSubmitToCreateTask = event => {\n\t\tevent.preventDefault();\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\t\taddTask(value);\n\t\tsetValue(\"\");\n\t};\n\n\treturn (\n\t\t<create-task-form-styling>\n\t\t\t<form onSubmit={handleSubmitToCreateTask}\n\t\t\t\tnoValidate\n\t\t\t\tautoComplete=\"off\">\n\t\t\t\t<create-task-container-left>\n\t\t\t\t\t<TextField label=\"Task\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tplaceholder=\"Add a new task\"\n\t\t\t\t\t\tonChange={event => setValue(event.target.value)} />\n\t\t\t\t</create-task-container-left>\n\t\t\t\t<create-task-container-right>\n\t\t\t\t\t<Tooltip title=\"save\" >\n\t\t\t\t\t\t\t<IconButton aria-label=\"save\" \n\t\t\t\t\t\t\t\ttype=\"submit\">\n\t\t\t\t\t\t\t\t<SendIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t</create-task-container-right>\n\t\t\t</form>\n\t\t</create-task-form-styling>\n\t);\n};\n\nexport default CreateTask;","import React from 'react';\n\n/**\n * React sync task web component.\n * \n * @param {function} addTask \n */\nconst SyncTask = ({allTasks, syncTask}) => {\n    const doesIdExist = (task) => (!('id' in task)) ? task : null;\n    const tasksToSync = allTasks.filter(doesIdExist);\n\n    return(\n        <button onClick = {() => syncTask(tasksToSync)}>\n            Sync To Database\n        </button>\n    );\n};\n\nexport default SyncTask;","const DifficultyEnum = {\n    \"VERY_EASY\": \"VERY_EASY\",\n    \"EASY\": \"EASY\",\n    \"NORMAL\": \"NORMAL\",\n    \"HARD\": \"HARD\",\n    \"VERY_HARD\": \"VERY_HARD\"\n};\n\nexport default DifficultyEnum;","const ImportanceEnumn = {\n    \"LOW\": \"LOW\",\n    \"MEDIUM\": \"MEDIUM\",\n    \"HIGH\": \"HIGH\"\n};\n\nexport default ImportanceEnumn;","import Dexie from 'dexie';\n\nconst db = new Dexie(\"ToDoDb\");\ndb.version(1).stores({\n    tasks: `++id`,\n    preferences: `++id`\n});\n\nexport default db;","import { useState, useEffect } from 'react';\nimport db from '../../service/database-definition';\n\n/**\n * Prompts the user to install the application.\n */\nconst AddToHomescreenPrompt = () => {\n\n    /**\n     * @param { boolean } prompt This constant can change\n     * @param { isTrusted: boolean } prompt This constant can change\n     */\n    const [prompt, setPrompt] = useState(false);\n\n    /**\n     * An identical function exists within app-drawer.js\n     */\n    const promptToInstall = () => {\n        if (prompt) {\n            return prompt.prompt();\n        }\n        return Promise.reject(new Error('Tried installing before browser sent \"beforeinstallprompt\" event'));\n    };\n\n    const initializePreferencesIfNecessary = count => {\n        if (count === 0) {\n            const initialize = {\n                username: 'loganconnor44',\n                promptUserForInstallation: true\n            };\n            db.preferences.put(initialize);\n        }\n    };\n\n    useEffect(() => {\n        db.preferences.count().then(initializePreferencesIfNecessary);\n        \n        const ready = event => {\n            event.preventDefault();\n            setPrompt(event);\n        };\n        window.addEventListener(\"beforeinstallprompt\", ready);\n        return () => {\n            window.removeEventListener(\"beforeinstallprompt\", ready);\n        };\n    }, []);\n\n    return [prompt, promptToInstall];\n};\n\nexport default AddToHomescreenPrompt;","import React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport List from '@material-ui/core/List';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport Divider from '@material-ui/core/Divider';\nimport FaceIcon from '@material-ui/icons/Face';\nimport AddToHomescreenPrompt from '../pwa/add-to-homescreen-prompt';\n\nconst AppDrawer = ({isOpen, toggleDrawer}) => {\n\n\tconst [prompt, promptToInstall] = AddToHomescreenPrompt();\n\n\t/**\n     * Determines if the prompt is false or anything else.\n     * Prompt may be an object such as { isTrusted: boolean }\n     */\n\tconst promptEventIsReady = () => prompt !== false ? prompt : false;\n\n\treturn(\n\t\t<Drawer open={isOpen}\n\t\t\tonClose={toggleDrawer} >\n\t\t\t<div>\n\t\t\t\t<List>\n\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t<FaceIcon />\n\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t</ListItem>\n\t\t\t\t</List>\n\t\t\t\t<Divider />\n\t\t\t\t<List>\n\t\t\t\t\t{\n\t\t\t\t\t\tpromptEventIsReady &&\n\t\t\t\t\t\t\t<ListItem>\n\t\t\t\t\t\t\t\t<ListItemIcon onClick={promptToInstall}>\n\t\t\t\t\t\t\t\t\t<GetAppIcon />\n\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t}\n\t\t\t\t</List>\n\t\t\t</div>\n\t\t</Drawer>\n\t);\n};\nexport default AppDrawer;","import React, {useState} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport AppDrawer from './app-drawer';\nimport '../../styles/navigation-bar.css';\n\nconst NavigationBar = () => {\n\tconst [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\tconst [isSearchIconClicked, setIsSearchIconClicked] = useState(false);\n\n\tconst toggleDrawer = event => {\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n        setIsDrawerOpen(!isDrawerOpen);\n    };\n\n\tconst searchIconClick = () => {\n\t\tsetIsSearchIconClicked(!isSearchIconClicked);\n\t};\n\n\treturn (\n\t\t<AppBar style={{position: 'sticky'}}>\n\t\t\t<Toolbar>\n\t\t\t\t<container-left>\n\t\t\t\t\t<hamburger-styling>\n\t\t\t\t\t\t<IconButton color=\"inherit\"\n\t\t\t\t\t\t\taria-label=\"open drawer\"\n\t\t\t\t\t\t\tonClick={toggleDrawer} >\n\t\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t<AppDrawer isOpen={isDrawerOpen}\n\t\t\t\t\t\t\t\ttoggleDrawer={toggleDrawer} />\n\t\t\t\t\t\t\n\t\t\t\t\t</hamburger-styling>\n\t\t\t\t\t<title-styling>\n\t\t\t\t\t\t<Typography variant=\"h6\" noWrap >\n\t\t\t\t\t\t\tPWA To Do App\n\t\t\t\t\t</Typography>\n\t\t\t\t\t</title-styling>\n\t\t\t\t</container-left>\n\t\t\t\t<container-right>\n\t\t\t\t\t{\n\t\t\t\t\t\tisSearchIconClicked === false ? (\n\t\t\t\t\t\t\t<search-icon-styling>\n\t\t\t\t\t\t\t\t{/* below classes taken from raw, inspecting html - could not get icons to match*/}\n\t\t\t\t\t\t\t\t<div className=\"MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit\">\n\t\t\t\t\t\t\t\t\t<SearchIcon onClick={searchIconClick} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</search-icon-styling>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<ClickAwayListener onClickAway={searchIconClick} >\n\t\t\t\t\t\t\t\t\t<search-input-styling>\n\t\t\t\t\t\t\t\t\t\t<InputBase autoFocus\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Search…\"\n\t\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-label': 'search' }}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"rootInput\" />\n\t\t\t\t\t\t\t\t\t</search-input-styling>\n\t\t\t\t\t\t\t\t</ClickAwayListener>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</container-right>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n}\n\nexport default NavigationBar;","import React, { useState, useEffect } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport AddToHomescreenPrompt from './add-to-homescreen-prompt';\nimport db from '../../service/database-definition';\n\n/**\n * React web component to install the WebApk or a web shortcut to the user's homescreen.\n */\nconst InstallPwa = () => {\n    const [prompt, promptToInstall] = AddToHomescreenPrompt();\n    const [isAddToHomescreenVisible, setIsAddToHomescreenVisible] = useState(false);\n    const [promptUserForInstallation, setPromptUserForInstallation] = useState(false);\n\n    \n\n    const dismissAndStorePreference = event => {\n        hideAddToHomescreen();\n        doNotPromptAgain(event);\n    };\n\n    const hideAddToHomescreen = () => setIsAddToHomescreenVisible(false);\n\n    const installAndHideMessage = () => {\n        hideAddToHomescreen();\n        promptToInstall();\n    };\n\n    const doNotPromptAgain = event => {\n        event.preventDefault();\n        db.preferences.toArray().then(results => {\n            db.preferences.update(results[0].id, {promptUserForInstallation: false});\n        });\n    };\n    \n    db.preferences.toArray().then(results => {\n        if (results.length !== 0) {\n            setPromptUserForInstallation(results[0].promptUserForInstallation);\n        }\n    });\n    \n    useEffect(() => {\n        /**\n         * Determines if the prompt is false or anything else.\n         * Prompt may be an object such as { isTrusted: boolean }\n         */\n        const promptEventIsReady = () => prompt !== false ? prompt : false;\n\n        if (promptEventIsReady() && promptUserForInstallation) {\n            setIsAddToHomescreenVisible(true);\n        }\n    }, [prompt, promptUserForInstallation]);\n\n    const message = \"Click here to download this app.\";\n\n    return ( \n        isAddToHomescreenVisible &&\n            <Snackbar anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                    \n                }}\n                open={isAddToHomescreenVisible}\n                autoHideDuration={3000} >\n                <SnackbarContent message={\n                    <div style={{\n                            display: 'flex',\n                            alignItems: 'center'\n                        }} >\n                        <InfoIcon style={{marginRight: 4}} />\n                    {message}\n                    </div>\n                    }\n                    style={{backgroundColor: '#43a047'}}\n                    action={\n                        <div>\n                            <IconButton key=\"download-and-dismiss\" aria-label=\"download-and-dismiss\" onClick={installAndHideMessage} >\n                                <GetAppIcon />\n                            </IconButton>\n                            <IconButton key=\"close\" aria-label=\"close\" onClick={dismissAndStorePreference} >\n                                <CloseIcon />\n                            </IconButton>\n                        </div>\n                    } />\n            </Snackbar>\n    );\n};\n\nexport default InstallPwa;","import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport axios from 'axios';\nimport TaskTable from './task/views/task-table';\nimport CreateTask from './task/actions/create-task';\nimport SyncTask from './sync-task';\nimport StatusEnum from '../util/status-enum';\nimport DifficultyEnum from '../util/difficulty-enum';\nimport ImportanceEnum from '../util/importance-enum';\nimport NavigationBar from './navigation/navigation-bar';\nimport InstallPwa from './pwa/install-pwa';\nimport db from '../service/database-definition';\nimport '../styles/to-do.css';\n\n/**\n * Main To Do application component.\n */\nconst Todo = () => {\n    const [hasError, setError] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [tasks, setTasks] = useState([]);\n    const [tasksRemaining, setTasksRemaining] = useState(0);\n\n    /**\n     * Retrieves data from mock api.\n     */\n    // useEffect(() => {\n    //     const fetchData = async () => {\n    //         setIsLoading(true);\n    //         try {\n    //             const response = await axios.get(\"http://localhost:8080/to-do/goal/1\");\n    //             console.log(response.data);\n    //             setTasks([response.data]);\n    //         } catch(error) {\n    //             setError(true);\n    //         }\n    //         setIsLoading(false);\n    //     };\n    //     fetchData();\n    // }, []);\n\n    /**\n     * Updates setTasksRemaining anytime there is a change to `tasks`\n     */\n    useEffect(() => {\n        setTasksRemaining(tasks.filter(task => task.status === StatusEnum.ACTIVE).length);\n    }, [tasks]);\n\n    useEffect(() => {\n        const fetchBrowserData = async () => {\n            setIsLoading(true);\n            try {\n                db.tasks.toArray().then(x => setTasks(x));\n            } catch(error) {\n                setError(true);\n            }\n            setIsLoading(false);\n        };\n        fetchBrowserData();\n    // eslint-disable-next-line\n    }, []);\n\n    /**\n     * Adds a new task and defaults it to not complete.\n     * \n     * @param {String} title \n     */\n    const addTask = name => {\n        const newUserTask = { \n            name: name,\n            status: StatusEnum.ACTIVE,\n            created: Date.now(),\n            deadline: null,\n            description: null,\n            diffculty: DifficultyEnum.NORMAL,\n            importance: ImportanceEnum.MEDIUM,\n            lastModified: null,\n            owner: \"Logan Connor\"\n        };\n        const newTasks = [\n            ...tasks,\n            newUserTask\n        ];\n        setTasks(newTasks);\n        db.tasks.put(newUserTask)\n    };\n\n    /**\n     * Sets an existing task to completed.\n     * \n     * @param { {id: integer, index: integer} } selectedTask\n     */\n    const completeTask = selectedTask => {\n        const existingTasks = toggleTaskStatusIndicator([selectedTask]);\n        db.tasks.update(selectedTask.id, {status: existingTasks[selectedTask.index].status});\n    };\n\n    /**\n     * Edits an existing task's name.\n     * \n     * @todo this param is not correct\n     * @param { {id: integer, index: integer} } selectedTask\n     */\n    const editTask = updatedTask => {\n        updateEditedTasks(updatedTask);\n        db.tasks.update(updatedTask.id, {name: updatedTask.name});\n    };\n\n    const updateEditedTasks = updatedTask => {\n        const existingTasks = [...tasks];\n        existingTasks.forEach(task => {\n            if (updatedTask.id === task.id) {\n                task.name = updatedTask.name;\n            }\n        });\n        setTasks(existingTasks);\n    };\n\n    /**\n     * Toggles a task's status enum.\n     * \n     * Retrieves the existing tasks.\n     * Iterates through the passed in selected tasks and sets the appropriate status.\n     * Sets the tasks to the updated ones.\n     * Returns the updated tasks.\n     * @param { [ {id: integer, index: integer} ] } selectedTasks \n     * @returns { [ {id: integer, index: integer} ] }\n     */\n    const toggleTaskStatusIndicator = selectedTasks => {\n        const existingTasks = [...tasks];\n        selectedTasks.forEach(task => {\n            if (existingTasks[task.index].status === StatusEnum.INACTIVE) {\n                existingTasks[task.index].status = StatusEnum.ACTIVE;\n            } else if (existingTasks[task.index].status === StatusEnum.ACTIVE) {\n                existingTasks[task.index].status = StatusEnum.INACTIVE;\n            }\n        });\n        setTasks(existingTasks);\n        return existingTasks;\n    };\n\n    /**\n     * Removes an existing task from the application state.\n     * \n     * @param { {id: integer, index: integer} } selectedTask \n     */\n    const removeTask = selectedTask => {\n        const existingTasks = [...tasks];\n        existingTasks.splice(selectedTask.index, 1);\n        setTasks(existingTasks);\n        console.log(`the selected task id is: ${selectedTask.id}`)\n        db.tasks.where(\"id\").equals(selectedTask.id).delete()\n    };\n\n    const batchRemoveTasks = selectedTasks => {\n        const keysToDelete = selectedTasks.map(x => x.id);\n        db.transaction('rw', db.tasks, async () => {\n            db.tasks.bulkDelete(keysToDelete);\n            db.tasks.toArray().then(x => setTasks(x));\n        }).then(() => {\n            console.info(`The selected tasks, ${JSON.stringify(selectedTasks)}, were saved to the browser db.`);\n        }).catch(err => {\n            console.debug(`There was an error when removing the selected tasks, ${JSON.stringify(selectedTasks)}, from the browser db.`);\n            console.error(err.stack);\n        });\n    };\n\n    const batchCompleteTasks = selectedTasks => {\n        const existingTasks = toggleTaskStatusIndicator(selectedTasks);        \n        \n        db.transaction('rw', db.tasks, async () => {\n            selectedTasks.forEach(task => {\n                db.tasks.update(task.id, {status: existingTasks[task.index].status});\n            });\n            db.tasks.toArray().then(x => setTasks(x));\n        }).then(() => {\n            console.info(`The selected tasks, ${JSON.stringify(selectedTasks)}, were set as complete in the browser db.`);\n        }).catch(err => {\n            console.debug(`There was an error when updating the selected tasks, ${JSON.stringify(selectedTasks)}, to the browser db.`)\n            console.error(err.stack);\n        });\n    };\n\n    const syncTask = tasksToSync => {\n        console.log(tasksToSync);\n        const syncData = async () => {\n            setIsLoading(true);\n            for (let i = 0; i < tasksToSync.length; i++) {\n                const response = await axios.post(\"http://localhost:8080/to-do/goal\", tasksToSync[i]).then(response => {\n                    console.log(response);\n                }).catch(function (error) {\n                    console.log(error);\n                });\n                //setTasks([response.data]);\n            }\n            setIsLoading(false);\n        };\n        syncData();\n        return;\n    };\n\n    return(\n        <app-root-styling>\n\n            <InstallPwa />\n\n            <div>\n                <NavigationBar />\n            </div>\n\n            <app-content-styling>\n                <Grid container \n                    spacing={3} \n                    alignItems=\"center\"\n                    justify=\"center\">\n                    <Grid item xs={10}>\n                        <grid-content-styling>\n                            <Paper style={{padding: '16px'}}>\n                                <Typography variant=\"h6\" gutterBottom>\n                                        {tasksRemaining} Active Tasks\n                                    </Typography>\n\n                                    {hasError && <div>Something went wrong ...</div>}\n\n                                    {!isLoading && tasks ?\n                                        <TaskTable tasks={tasks}\n                                            completeTask = {completeTask}\n                                            removeTask = {removeTask} \n                                            editTask = {editTask}\n                                            batchRemoveTasks = {batchRemoveTasks} \n                                            batchCompleteTasks = {batchCompleteTasks} /> :\n                                        <div>Loading ...</div>\n                                    }\n\n                                <div className = \"create-task\">\n                                    <CreateTask addTask = {addTask} />\n                                </div>\n                            </Paper>\n                        </grid-content-styling>\n                        \n                        <div>\n                            <SyncTask allTasks = {tasks} \n                                syncTask = {syncTask} />\n                        </div>\n                    </Grid>\n                </Grid>\n            </app-content-styling>\n\n        </app-root-styling>\n    );\n};\n\nexport default Todo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './components/to-do';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}